---
import Layout from "../layouts/Layout.astro";

const { env } = Astro.locals.runtime;
const success = Astro.url.searchParams.get("success") || false;
const data = { name: "", email: "", message: "" };
const errors = { name: "", email: "", message: "" };
let serverError = false;

if (Astro.request.method === "POST") {
  try {
    // Get the form data
    const formData = await Astro.request.formData();
    data.name = formData.get("name") as string;
    data.email = formData.get("email") as string;
    data.message = formData.get("message") as string;

    // Validate the data
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (typeof data.name !== "string" || data.name.length < 1) {
      errors.name += "Please enter your name.";
    }
    if (typeof data.email !== "string" || !emailRegex.test(data.email)) {
      errors.email += "Please enter a valid email.";
    }
    if (typeof data.message !== "string") {
      errors.message += "Please enter a message.";
    }
    if (data.message.length > 2000) {
      errors.message += "Message must be less than 2000 characters.";
    }

    if (!Object.values(errors).some((msg) => msg)) {
      // Verify Turnstile
      const url = "https://challenges.cloudflare.com/turnstile/v0/siteverify";
      const turnstileResponse = await fetch(url, {
        body: JSON.stringify({
          secret: env.TURNSTILE_SECRET_KEY,
          response: formData.get("cf-turnstile-response"),
          remoteip: Astro.request.headers.get("CF-Connecting-IP"),
        }),
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const outcome: any = await turnstileResponse.json();
      if (!outcome.success) {
        console.log(outcome);
        throw new Error("ERROR: Turnstile verification failed");
      }

      // Send email
      try {
        // Due to an issue with the mailgun.js library, we need to use fetch
        // https://github.com/mailgun/mailgun.js/issues/426

        // Set up the Mailgun API request
        const mailData = new FormData();
        mailData.append("from", `postmaster@${env.MAILGUN_DOMAIN}`);
        mailData.append("to", "contact@hassett.io");
        mailData.append("subject", `Contact Form Submission: ${data.name}`);
        mailData.append(
          "text",
          `Name: ${data.name}\nEmail: ${data.email}\nMessage: ${data.message}`,
        );

        // Send the Mailgun API request
        const mailgunResponse = await fetch(
          `https://api.mailgun.net/v3/${env.MAILGUN_DOMAIN}/messages`,
          {
            method: "POST",
            headers: {
              Authorization: `Basic ${btoa(`api:${env.MAILGUN_API_KEY}`)}`,
            },
            body: mailData,
          },
        );

        if (mailgunResponse.status !== 200) {
          console.error(mailgunResponse);
          throw new Error("ERROR: Mailgun failed to send");
        }
      } catch (error) {
        console.error(error);
        throw new Error("ERROR: Mailgun failed to send");
      }

      // Redirect to success page
      return Astro.redirect("/contact?success=true");
    }
  } catch (error) {
    serverError = true;
    if (error instanceof Error) {
      console.error(error.message);
    } else {
      console.error(error);
    }
  }
}
---

<head>
  <script
    src="https://challenges.cloudflare.com/turnstile/v0/api.js"
    async
    defer
    is:inline></script>
</head>

<Layout title="Ethan Hassett | Get in Touch">
  <noscript>
    <style>
      #form-container {
        display: none;
      }
    </style>

    <div class="pb-(--space-3xl)">
      <p class="heading">Get in Touch</p>
      <p class="my-(--space-2xs)">
        This form requires JavaScript to be enabled.
      </p>
      <hr class="divider" />
      <a href="/">&#8250; go home</a>
    </div>
  </noscript>

  <div id="form-container" class:list={success ? "pb-(--space-3xl)" : "w-full"}>
    <p class="heading">Get in Touch</p>

    <div class:list={success ? "" : "hidden"}>
      <p class="my-(--space-2xs)">
        Thank you for your message! I will get back to you as soon as possible.
      </p>
      <hr class="divider" />
      <a href="/">&#8250; go home</a>
    </div>

    <form
      id="contact"
      class:list={success ? "hidden" : ""}
      class="my-(--space-m) flex w-full"
      method="POST"
    >
      <div class="flex flex-1 flex-col gap-(--space-m)">
        <input
          class:list={errors.name && "border-red-400"}
          class="contact-input border-b-2"
          type="text"
          id="name"
          name="name"
          placeholder="name"
          required
          value={data.name}
        />
        <span class="form-error">{errors.name}</span>
        <input
          class:list={errors.email && "border-red-400"}
          class="contact-input border-b-2"
          type="email"
          id="email"
          name="email"
          placeholder="email"
          required
          value={data.email}
        />
        <span class="form-error">{errors.email}</span>
        <textarea
          class:list={errors.message && "border-red-400"}
          class="contact-input mt-(--space-3xs) min-h-(--space-3xl) border-2"
          id="message"
          name="message"
          placeholder="message"
          required
          maxlength="2000">{data.message}</textarea
        >
        <span class="form-error">{errors.message}</span>
        <div class="cf-turnstile" data-sitekey={env.TURNSTILE_SITE_KEY}></div>
      </div>
    </form>
    <span
      class="mt-(--space-3xs) h-(--space-s) w-full text-red-400"
      set:html={serverError &&
        'Sorry, there was an issue. <a class="underline" href="mailto:contact@hassett.io">Reach out directly.</a>'}
    />
    <button
      id="submit"
      class="mr-(--space-3xs) cursor-pointer"
      class:list={serverError || success ? "hidden" : ""}
      form="contact"
      type="submit"
    >
      &#8250; submit
    </button>
  </div>
</Layout>

<script is:inline>
  // Style form elements and display error messages
  function validateInput(e) {
    if (!e.checkValidity()) {
      e.classList.add("border-red-400");
      switch (e.getAttribute("name")) {
        case "name":
          e.nextElementSibling.textContent = "Please enter your name.";
          break;
        case "email":
          e.nextElementSibling.textContent = "Please enter a valid email.";
          break;
        case "message":
          e.nextElementSibling.textContent = "Please enter a message.";
          break;
      }
    } else {
      e.classList.remove("border-red-400");
      e.nextElementSibling.textContent = "";
    }
  }

  // Remove default browser validation bubbles
  document
    .getElementById("contact")
    .addEventListener("invalid", (e) => e.preventDefault(), true);

  // Validate on blur
  document.querySelectorAll("input, textarea").forEach((e) => {
    e.addEventListener("blur", () => validateInput(e));
  });

  // Validate on submit
  document.getElementById("submit").addEventListener("click", () => {
    if (!document.getElementById("contact").checkValidity()) {
      document
        .querySelectorAll("input:invalid, textarea:invalid")
        .forEach((e) => validateInput(e));
    }
  });

  // Reset Turnstile on form submit if expired
  document.getElementById("contact").addEventListener("submit", () => {
    if (turnstile.isExpired()) {
      turnstile.reset();
    }
  });
</script>
