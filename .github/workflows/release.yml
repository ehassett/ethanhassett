name: Release

on:
  pull_request_target:
    types: [closed]

permissions:
  pull-requests: read
  contents: write
  id-token: write

jobs:
  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    if: ${{ (github.event.pull_request.merged == true) }}
    outputs:
      current_version: ${{ steps.versions.outputs.current_version }}
      is_new_release: ${{ steps.versions.outputs.is_new_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0

      - name: Get versions
        id: versions
        run: |
          current_version=$(cat ./app/package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[",]//g' \
            | tr -d " \t\n\r")

          previous_version=$(git describe --tags --abbrev=0)

          echo "Current Version: $current_version"
          echo "Previous Version: $previous_version"

          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"
          if [[ $current_version != "$previous_version" ]]; then
            echo "is_new_release=true" >> "$GITHUB_OUTPUT"
          fi

  docker_image:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: check_version
    if: ${{ (github.event.pull_request.merged == true) && (needs.check_version.outputs.is_new_release == 'true') }}
    env:
      DOCKERHUB_USERNAME: "hassett"
      IMAGE_NAME: "ethanhassett"
      VERSION: ${{ needs.check_version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: "projects/ethanhassett/locations/global/workloadIdentityPools/github/providers/github"
          service_account: "spacelift@hassettio.iam.gserviceaccount.com"
          access_token_lifetime: 300s

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and push image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          push: true
          tags: |
            us-east1-docker.pkg.dev/ethanhassett/ethanhassett/ethanhassett:${{ env.VERSION }}
            us-east1-docker.pkg.dev/ethanhassett/ethanhassett/ethanhassett:latest

  release:
    name: Release and Tag New Version
    runs-on: ubuntu-latest
    needs: [check_version, docker_image]
    if: github.event.pull_request.merged == true && needs.check_version.outputs.is_new_release == 'true' && needs.docker_image.result != 'failed' && needs.docker_image.result != 'cancelled'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      VERSION: ${{ needs.check_version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Push tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Create release
        run: |
          gh release create ${{ env.VERSION }} \
            --repo="${{ env.GITHUB_REPOSITORY }}" \
            --title="${{ env.VERSION }}" \
            --generate-notes

  deploy:
    name: Deploy Spacelift Stack
    runs-on: ubuntu-latest
    needs: docker_image
    if: github.event.pull_request.merged == true && needs.docker_image.result != 'failed' && needs.docker_image.result != 'cancelled'
    env:
      SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
      SPACELIFT_API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
      SPACELIFT_API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
    steps:
      - name: Setup spacectl
        uses: spacelift-io/setup-spacectl@v1.3.0

      - name: Deploy Stack
        run: |
          counter=0
          while [[ $counter -lt 60 && $(spacectl stack run list --id ethanhassett | grep -Ec 'QUEUED|READY|PREPARING|INITIALIZING|PLANNING') -gt 0 ]]; do
            echo "Waiting for plan to complete..."
            sleep 5
            counter=$((counter + 1))
          done

          if [[ $(spacectl stack run list --id ethanhassett | grep -c UNCONFIRMED) -gt 0 ]]; then
            run_id=$(spacectl stack run list --id ethanhassett \
              | grep -m 1 UNCONFIRMED \
              | cut -d "|" -f 1 \
              | tr -d " \t\n\r" \
              | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")
            spacectl stack confirm --id ethanhassett --run "$run_id"
          else
            echo "No runs need confirmation!"
          fi
