name: Release

on:
  push:
    branches: ["main"]

permissions:
  pull-requests: read
  contents: write
  id-token: write

jobs:
  check_version:
    name: Check Version
    runs-on: ubuntu-22.04
    outputs:
      current_version: ${{ steps.versions.outputs.current_version }}
      is_new_release: ${{ steps.versions.outputs.is_new_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get versions
        id: versions
        run: |
          current_version=$(cat ./app/package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[",]//g' \
            | tr -d " \t\n\r")

          previous_version=$(git describe --tags --abbrev=0)

          echo "Current Version: $current_version"
          echo "Previous Version: $previous_version"

          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"
          if [[ $current_version != "$previous_version" ]]; then
            echo "is_new_release=true" >> "$GITHUB_OUTPUT"
          fi

  release:
    name: Release and Tag New Version
    runs-on: ubuntu-22.04
    needs: [check_version]
    if: needs.check_version.outputs.is_new_release == 'true'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      VERSION: ${{ needs.check_version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Push tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Create release
        run: |
          gh release create ${{ env.VERSION }} \
            --repo="${{ env.GITHUB_REPOSITORY }}" \
            --title="${{ env.VERSION }}" \
            --generate-notes
